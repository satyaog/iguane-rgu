Error.  nthreads cannot be larger than environment variable "NUMEXPR_MAX_THREADS" (64)/network/scratch/o/ortizgas/data/milabench/venv/torch/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884
  warnings.warn(
Some weights of GPTNeoXForSequenceClassification were not initialized from the model checkpoint at EleutherAI/pythia-160m and are newly initialized: ['score.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of GPTNeoXForSequenceClassification were not initialized from the model checkpoint at EleutherAI/pythia-160m and are newly initialized: ['score.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|          | 0/95 [00:00<?, ?it/s]                                        0%|          | 0/95 [00:17<?, ?it/s]  1%|          | 1/95 [00:17<27:25, 17.50s/it]                                                1%|          | 1/95 [00:25<27:25, 17.50s/it]  2%|▏         | 2/95 [00:25<18:46, 12.11s/it]                                                2%|▏         | 2/95 [00:34<18:46, 12.11s/it]  3%|▎         | 3/95 [00:34<16:03, 10.47s/it]Traceback (most recent call last):
  File "/home/mila/o/ortizgas/CODE/milabench/benchmarks/rlhf/main.py", line 133, in <module>
    main()
  File "/home/mila/o/ortizgas/CODE/milabench/benchmarks/rlhf/main.py", line 124, in main
    trainer.train()
  File "/network/scratch/o/ortizgas/data/milabench/venv/torch/lib/python3.10/site-packages/trl/trainer/ppov2_trainer.py", line 465, in train
    accelerator.backward(loss)
  File "/network/scratch/o/ortizgas/data/milabench/venv/torch/lib/python3.10/site-packages/accelerate/accelerator.py", line 2196, in backward
    loss.backward(**kwargs)
  File "/network/scratch/o/ortizgas/data/milabench/venv/torch/lib/python3.10/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/network/scratch/o/ortizgas/data/milabench/venv/torch/lib/python3.10/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/network/scratch/o/ortizgas/data/milabench/venv/torch/lib/python3.10/site-packages/torch/autograd/graph.py", line 768, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.71 GiB. GPU 0 has a total capacity of 39.39 GiB of which 1.64 GiB is free. Including non-PyTorch memory, this process has 37.74 GiB memory in use. Of the allocated memory 36.77 GiB is allocated by PyTorch, and 481.79 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
  3%|▎         | 3/95 [00:37<19:25, 12.67s/it]
